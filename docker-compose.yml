version: '3.7'

services:
  postgres-airflow:
    image: postgres:13
    container_name: airflow_postgres_db
    environment:
      - POSTGRES_USER=airflow_db_user
      - POSTGRES_PASSWORD=airflow_db_password
      - POSTGRES_DB=airflow_db
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow_db_user -d airflow_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_init
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_db_user:airflow_db_password@postgres-airflow:5432/airflow_db
    entrypoint: >
      /bin/bash -c "
      airflow db migrate &&
      airflow users create --username airflow --firstname Air --lastname Flow --role Admin --email airflow@example.com --password airflow
      "

    networks:
      - backend

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile

    container_name: airflow_webserver
    restart: always
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_db_user:airflow_db_password@postgres-airflow:5432/airflow_db
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__API__AUTH_BASIC_USERNAME=${AIRFLOW_USER:-airflow}
      - AIRFLOW__API__AUTH_BASIC_PASSWORD=${AIRFLOW_PASSWORD:-airflow}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./sql:/opt/airflow/sql
      - ./sqlite_db:/opt/airflow/sqlite_db
      - ./config.py:/opt/airflow/config.py
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: airflow webserver
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile

    container_name: airflow_scheduler
    restart: always
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_db_user:airflow_db_password@postgres-airflow:5432/airflow_db
      - MSSQL_SERVER=${MSSQL_SERVER}
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - MSSQL_USER=${MSSQL_USER}
      - MSSQL_PASSWORD=${MSSQL_PASSWORD}
      - MSSQL_DW_SERVER=${MSSQL_DW_SERVER}
      - MSSQL_DW_DATABASE=${MSSQL_DW_DATABASE}
      - MSSQL_DW_USER=${MSSQL_DW_USER}
      - MSSQL_DW_PASSWORD=${MSSQL_DW_PASSWORD}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - ORACLE_HOST=${ORACLE_HOST}
      - ORACLE_USER=${ORACLE_USER}
      - ORACLE_PASSWORD=${ORACLE_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - SQLITE_DATABASE=${SQLITE_DATABASE}
      - SQLITE_PATH=${SQLITE_PATH}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./sql:/opt/airflow/sql
      - ./sqlite_db:/opt/airflow/sqlite_db
      - ./config.py:/opt/airflow/config.py
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: airflow scheduler
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'airflow scheduler'"]
      interval: 30s
      timeout: 10s
      retries: 3

  mssql-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql_db
    restart: always
    environment:
      SA_PASSWORD: ${MSSQL_PASSWORD}
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
    ports:
      - "${MSSQL_PORT}:1433"
    networks:
      - backend

  mysql-db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  oracle-db:
    image: gvenzl/oracle-xe
    container_name: oracle_db
    restart: always
    environment:
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
      APP_USER: ${ORACLE_USER}
      APP_USER_PASSWORD: ${ORACLE_PASSWORD}
    ports:
      - "${ORACLE_PORT}:1521"
    networks:
      - backend

  postgres-db:
    image: postgres:13
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - backend

networks:
  backend:
    driver: bridge
